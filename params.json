{"name":"Custom Maps Navigation using Open Street Maps Data ","tagline":"OpenStreetMaps - Implementation of Shortest Path Algorithm using Neo4J ","body":"##Custom Navigation in Maps using OpenStreetMaps Data\r\n\r\nStructure of XML OSM Schema:\r\nNode , Way and Relationships - For more details please visit : http://wiki.openstreetmap.org/wiki/OSM_XML\r\n\r\nDesigning DOM XML Parser:\r\n```\r\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); DocumentBuilder builder = factory.newDocumentBuilder(); Document document = builder.parse(new File(\"C:/Users/KRITHIVASAN CHANDRAN/Desktop/eclipse/LisbonNavigationOSMParser/Lisboa.xml\"));\r\n\r\n//Getting the Child Elements by Named Node Name – Way and Node –\r\n//Getting the Child Elements by Named Node Name Way and Node\r\nNodeList nodeList = document.getDocumentElement().getElementsByTagName(\"node\");\r\nNodeList way_Node_List = document.getDocumentElement() .getElementsByTagName(\"way\");\r\n```\r\n\r\nDesigning JSON Parser:\r\n```\r\npublic class JSONParser {\r\n\r\npublic static void main(String[] args) throws IOException { \r\n// Getting the tag data\r\nMap popularkeys = new HashMap();\r\n for(int i=0;i<=2;i++) { \r\nURL url = new URL(\"http://taginfo.openstreetmap.org/api/4/tags/popular?sortname=count_all&sortorder=desc&page=\"+i+\"&rp=15&qtype=tag&format=json_pretty\"); \r\nInputStream is = url.openStream(); \r\nJsonParserFactory factory=JsonParserFactory.getInstance(); \r\ncom.json.parsers.JSONParser parser=factory.newJsonParser(); \r\nMap jsonData=parser.parseJson(is, \"UTF-8\"); \r\nList value = (List) jsonData.get(\"data\"); \r\nfor(Map dataset : value){ \r\nString keyset = (String) dataset.get(\"key\"); \r\nif(!keyset.equalsIgnoreCase(\"source\") && keyset != null){ \r\nString datavalue = (String) dataset.get(\"value\"); \r\npopularkeys.put(keyset, datavalue); } } } \r\nSystem.out.println(popularkeys.entrySet());\r\n } } \r\nString datavalue = (String) dataset.get(\"value\"); \r\npopularkeys.put(keyset, datavalue); }}} \r\nSystem.out.println(popularkeys.entrySet()); }}\r\n```\r\n\r\nWriting Data to Neo4J Server:\r\n```\r\nConnection con = DriverManager.getConnection(\"jdbc:neo4j://localhost:7474/\");\r\nPreparedStatement statement = con.prepareStatement(synchronizercontainer.toString()); \r\nstatement.executeQuery();\r\n```\r\n\r\nWriting Cypher Query to write nodes and relationships to Neo4J graph database:\r\n\r\nCreate a node with reference Id , longitude , latitude and tag contents parsed from OpenStreetMap data\r\n```\r\nquery = \"CREATE ( n:way {refid :'\"+coordinateWay.get(jk).getReferenceId() +\"',\"+ bufferTag.toString() +\" Lat:'\"+coordinateWay.get(jk).getLatitude() +\"', Long:'\"+coordinateWay.get(jk).getLongitude()+\"'})\";\r\n\r\n```\r\n\r\nCreating Unique Relationships between lanes with reference to refId from OSM XML data:\r\n```\r\nCREATE UNIQUE (33360496)-[:localway]->(33360529) \r\nCREATE UNIQUE (33360529)-[:localway]->(33360530) \r\nCREATE UNIQUE (33360530)-[:localway]->(33360504) \r\nCREATE UNIQUE (33360504)-[:localway]->(33360505)\r\n CREATE UNIQUE (33360505)-[:localway]->(1135629360)\r\n```\r\n\r\nSample Cypher Query Language:\r\n```\r\nMATCH N RETURN COUNT(*) – Return the total number of nodes.\r\nSTART n=node(*) MATCH (n)-[r]? (m) RETURN n,r,m; - Return all the nodes with following outgoing directed relationship\r\nMATCH (lane : way {name : ‘Rua Augusta’ }) ? (way) RETURN way.name; - Returns the name of nodes connected to ‘Rua Augusta’.\r\nMATCH (lane : way {name : ‘Rua Augusta’ }) ? (way) RETURN way.name; - Returns the name of nodes incoming relationship to ‘Rua Augusta’.\r\nMATCH (lane:Way { name:\"Rua da Alfândega\" }),(laner:Way { name:\"Oliver Stone\" }), p = shortestPath((lane)-[*..15]?(laner)) RETURN p; - Returns the shortest path from Source to Destination in 15 hops .\r\nMATCH (lane:Way { name:\"Rua da Alfândega\" }),(laner:Way { name:\"Oliver Stone\" }), p = allShortestPaths((lane)-[*..15]?(laner)) RETURN p; - Returns all the shortest path from Source to Destination\r\n\r\nMATCH N RETURN COUNT(*) : Return the total number of nodes.\r\n\r\nSTART n=node(*) MATCH (n)-[r]ïƒ  (m) RETURN n,r,m; - Return all the nodes with following outgoing directed relationship\r\nMATCH (lane : way {name : â€˜Rua Augustaâ€™ }) ïƒ  (way) RETURN way.name; - Returns the name of nodes connected to â€˜Rua Augustaâ€™.\r\nMATCH (lane : way {name : â€˜Rua Augustaâ€™ }) ïƒŸ (way) RETURN way.name; - Returns the name of nodes incoming relationship to â€˜Rua Augustaâ€™.\r\nMATCH (lane:Way { name:\"Rua da AlfÃ¢ndega\" }),(laner:Way { name:\"Oliver Stone\" }), p = shortestPath((lane)-[*..15]ïƒ (laner)) RETURN p; - Returns the shortest path from Source to Destination in 15 hops .\r\nMATCH (lane:Way { name:\"Rua da AlfÃ¢ndega\" }),(laner:Way { name:\"Oliver Stone\" }), p = allShortestPaths((lane)-[*..15]ïƒ (laner)) RETURN p; - Returns all the shortest path from Source to Destination\r\n```\r\n\r\nVisualizing the directed Graph:\r\n```\r\nSTART n=node(*) MATCH (n)-[r]->(m) RETURN n,r,m LIMIT 250;\r\n```\r\nThis cypher query returns all the outgoing relationship associated with the node and is limited to 250 nodes. The screenshot of the graph is attached below .\r\n\r\nNode Relationships:\r\n\r\nLOCAL_CONNECT :\r\n\r\nWay Named Node contains child elements identified by referenceID. The relationship that exists between a single lane is [:LOCAL_CONNECT]. The relationship is as shown below:\r\n\r\nEXTERNAL_CONNECT:\r\n\r\nTotally distinct different ways with one similar reference Ids are connected by [:EXTERNAL_CONNECT] relationship. Cypher.java identifies the similar referenceID between different lanes and connects them relationally.\r\n\r\n```\r\nGraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase(\"C:/Users/KRITHIVASAN CHANDRAN/Documents/Neo4j/default.graphdb\");\r\nExecutionEngine engine = new ExecutionEngine( db );\r\nresult = engine.execute(\" MATCH (n:way { refid :'\" + str + \"'}) RETURN DISTINCT n.name AS name;\"); \r\nIterator column = result.columnAs( \"name\" );\r\n\r\n//Returns the Distinct referenceId ad stores in the ArrayList.\r\n\r\nbuffer.append(\"MATCH (n:way),(lane:way) WHERE n.name = '\"+source+\"' AND lane.name = '\"+destination+\"' AND n.refid ='\"+str+\"' AND lane.refid= '\"+str+\"'\"); \r\nbuffer.append(\"CREATE UNIQUE (n)-[:EXTERNAL_CONNECT]-(lane);\");\r\n```\r\n\r\nDistance Calculation given their Latitudes and Longitudes : (Reference StackOverflow)\r\n```\r\n double dLat = getRad(latitude2 - latitude1);\r\n        double dLong = getRad(longitude2 - longitude1);\r\n\r\n        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(getRad(latitude1)) * Math.cos(getRad(latitude2)) * \r\n                                                                               Math.sin(dLong / 2) * Math.sin(dLong / 2);\r\n        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        return (RADIUS_EARTH * c) * 1000;\r\n        }\r\n\r\n        private Double getRad(Double x) {\r\n        return x * Math.PI / 180;\r\n        }\r\n```\r\n\r\nCase Study : Lisbon , Portugal - 50 Mile Radius\r\n\r\nAnalysis 1:\r\n\r\nSource : Calçada do Carmo , Lisbon , Portugal\r\n\r\nDestination : Rua de São Julião , Lisbon , Portugal\r\n\r\nQuery:\r\n```\r\nMATCH (martin:way { name:\"Calçada do Carmo\" }),(oliver:way { name:\"Rua -de São Julião\" }), p = shortestPath((martin)-[*..13]-(oliver))\r\n```\r\nThe Output of Neo4J is in JSON format is included in project Jar file with Name Analysis_Json1 for analysis.\r\n\r\nAnalysis2:\r\nSource : Rua da Padaria, Lisboa, Portugal\r\n\r\nDestination : Rua do Instituto Virgílio Machado, Lisboa, Portugal\r\n\r\nSource Node : Rua da Padaria \r\nTransit Node : Rua dos Bacalhoeiros, Rua dos Arameiros, Rua da Alfândega, Rua Instituto Virgilio Machado\r\n\r\nDestination : Rua do Instituto VirgÃ­lio Machado, Lisboa, Portugal\r\n\r\n```\r\nMATCH (martin:way { name:\"Rua Instituto Virgilio Machado\"}), (oliver:way { name:\"Rua da Padaria\"}), p = shortestPath((martin)-[*]-(oliver)) RETURN p;\r\n```\r\n\r\nThe Output of Neo4J is in JSON format is included in project Jar file with Name Analysis_Json3 .\r\n\r\nEnvironment:\r\n• Eclipse – Juno \r\n• Neo4J Database (No SQL graph Database) (www.neo4j.org)\r\n• XML , JSON \r\n• TileMill – Custom Map designer \r\n• QGIS – Vector Mapping \r\n• OpenXC (Fords Open Source Platform) \r\n• Open Data Portugal - http://www.dados.gov.pt/pt/inicio/inicio.aspx \r\n• Sublime Text Editor\r\n• Open Street Maps\r\n\r\nReferences:\r\n• StackOverflow.com \r\n• Neo4J Manual – Cypher Query Language \r\n• Java 8 Complete reference.\r\n\r\nAuthor:\r\nImplemented and Designed by @KrithivasanChandran - Krithivasan Chandran\r\n\r\nSupport:\r\nYou can contact me c.keerthivasan@gmail.com if you are experiencing any issues running my code.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}